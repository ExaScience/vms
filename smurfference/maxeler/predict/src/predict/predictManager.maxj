package predict;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.platform.max5.manager.MAX5CManager;

import org.la4j.Matrix;

public class predictManager extends MAX5CManager {

	public static final String kernelName = "predictKernel";

	static String readFile(String path, Charset encoding) 
			  throws IOException 
			{
			  byte[] encoded = Files.readAllBytes(Paths.get(path));
			  return new String(encoded, encoding);
			}
	
	static Matrix readMM(String path)
	  throws IOException 
	{
		String Us = readFile("test.txt", StandardCharsets.UTF_8);
		return Matrix.fromMatrixMarket(Us);
	}

	public predictManager(EngineParameters params) 
	  throws IOException 
	{
		super(params);

		Matrix U = readMM("U");
		Matrix B = readMM("B");

		final KernelBlock kernel = addKernel(new
				predictKernel(makeKernelParameters(kernelName),
					U, // latent model (num latent x num proteins)
					B  // link matrix  (num features x num latent)
					));

		//-- features go in
		final DFELink f = addStreamFromCPU("features");
		kernel.getInput("features") <== f;

		//-- predictions come out
		final DFELink p = addStreamToCPU("predictions");
		p <== kernel.getOutput("predictions");
	}

	public static void main(final String[] argv)
	  throws IOException 
	{
		final EngineParameters params = new EngineParameters(argv);
		final predictManager manager = new predictManager(params);
		manager.build();
	}

}
